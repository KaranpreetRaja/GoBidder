apiVersion: v1
data:
  nginx.conf: |
    events {}

    http {
        server {
            # Listen on port 80 (this can be mapped from docker-compose.yml)
            listen 80;

            location = /auth {
                internal;
                proxy_pass http://auth-service:8081/auth;
                proxy_pass_request_body off;
                proxy_set_header Content-Length "";
            }

            location /api/auth {
                # Preflight CORS headers
                if ($request_method = OPTIONS) {
                    add_header Access-Control-Allow-Origin '*';
                    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                    add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization";
                    add_header Access-Control-Allow-Credentials true;
                    add_header Content-Type text/plain;
                    add_header Content-Length 0;
                    return 204;
                }
                # Remove "/api" from request
                rewrite ^/api/auth/(.*)$ /auth/$1 break;
                # Forward to auth service
                proxy_pass http://auth-service:8081;
                # Set headers
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                # Add CORS headers
                add_header X-Custom-Header1 "lol" always;
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
                add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Allow-Credentials true always;
                add_header X-Custom-Header2 "lol2" always;
            }

            location /api/users {
                # Preflight CORS headers
                if ($request_method = OPTIONS) {
                    add_header Access-Control-Allow-Origin '*';
                    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                    add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization";
                    add_header Access-Control-Allow-Credentials true;
                    add_header Content-Type text/plain;
                    add_header Content-Length 0;
                    return 204;
                }
                # Auth subrequest
                auth_request /auth;
                auth_request_set $auth_status $upstream_status;
                # Remove "/api" from request
                rewrite ^/api/users/(.*)$ /users/$1 break;
                # Forward to auth service
                proxy_pass http://auth-service:8081;
                # Set headers
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                # Add CORS headers
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
                add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Allow-Credentials true always;
            }

            location /api/auction {
                # Preflight CORS headers
                if ($request_method = OPTIONS) {
                    add_header Access-Control-Allow-Origin '*';
                    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                    add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization";
                    add_header Access-Control-Allow-Credentials true;
                    add_header Content-Type text/plain;
                    add_header Content-Length 0;
                    return 204;
                }
                # Auth subrequest
                auth_request /auth;
                auth_request_set $auth_status $upstream_status;
                # Remove "/api" from request
                rewrite ^/api/auction/(.*)$ /auction/$1 break;
                # Forward to auction service
                proxy_pass http://auction-service:8083;
                # Set headers
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                # Add CORS headers
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
                add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Allow-Credentials true always;
            }

            location /api/payment {
                # Preflight CORS headers
                if ($request_method = OPTIONS) {
                    add_header Access-Control-Allow-Origin '*';
                    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                    add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization";
                    add_header Access-Control-Allow-Credentials true;
                    add_header Content-Type text/plain;
                    add_header Content-Length 0;
                    return 204;
                }
                # Auth subrequest
                auth_request /auth;
                auth_request_set $auth_status $upstream_status;
                # We don't need to remove "/api" from request because papyment
                # service is configured to accept accept "/api" prefixes.
                # Forward to payment service
                proxy_pass http://payment-service:8082;
                # Set headers
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                # Add CORS headers
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
                add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Allow-Credentials true always;
            }

            location / {
                # Preflight CORS headers
                if ($request_method = OPTIONS) {
                    add_header Access-Control-Allow-Origin '*';
                    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                    add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization";
                    add_header Access-Control-Allow-Credentials true;
                    add_header Content-Type text/plain;
                    add_header Content-Length 0;
                    return 204;
                }
                # Auth subrequest
                auth_request /auth;
                auth_request_set $auth_status $upstream_status;
                # Forward all non-api requests to frontend
                proxy_pass http://frontend:3000;
                # Set headers
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                # Add CORS headers
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
                add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Allow-Credentials true always;
            }
        }
    }
kind: ConfigMap
metadata:
  creationTimestamp: "2024-12-17T21:00:28Z"
  name: reverse-proxy-config
  namespace: default
  resourceVersion: "33417"
  uid: 5f0cefc0-8d86-4927-89a5-7297037f323b
