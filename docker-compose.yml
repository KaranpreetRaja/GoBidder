services:
  auth-service:
    build:
      context: ./services
      dockerfile: AuthService/Dockerfile
    ports:
      - "8081:8081"
    volumes:
      - auth-data:/app/data
    networks:
      - microservices-network

  auction-service:
    build:
      context: ./services
      dockerfile: AuctionService/Dockerfile
    ports:
      - "8083:8083"
      - "9090:9090"
    environment:
      - GRPC_AUCTION_HOST=auction-service 
      - GRPC_AUCTION_PORT=9090
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      # Add more explicit Kafka configurations
      - SPRING_KAFKA_PROPERTIES_SECURITY_PROTOCOL=PLAINTEXT
      - SPRING_KAFKA_PROPERTIES_SASL_MECHANISM=PLAINTEXT
    depends_on:
      - redis
      - kafka
    volumes:
      - auth-data:/app/data
    networks:
      - microservices-network

  payment-service:
    build:
      context: ./services
      dockerfile: PaymentService/Dockerfile
    hostname: payment-service
    container_name: payment-service
    ports:
      - "8082:8082"
    networks:
      - microservices-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - microservices-network
    command: redis-server --appendonly yes 

  bid-service:
    build:
      context: ./services/BidService
      dockerfile: Dockerfile
    hostname: bid-service
    container_name: bid-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - GRPC_AUCTION_HOST=auction-service 
      - GRPC_AUCTION_PORT=9090
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      # Add more explicit Kafka configurations
      - SPRING_KAFKA_PROPERTIES_SECURITY_PROTOCOL=PLAINTEXT
      - SPRING_KAFKA_PROPERTIES_SASL_MECHANISM=PLAINTEXT
    depends_on:
      - redis
      - kafka
    networks:
      - microservices-network

  reverse-proxy:
    build:
      context: ./services/ReverseProxy
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    volumes:
      - ./services/ReverseProxy/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - microservices-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - AUTH_API=http://auth-service:8081
      - PAYMENT_API=http://payment-service:8082
      - AUCTION_API=http://auction-service:8083
      - FLASK_ENV=production
      - FLASK_APP=app.py
    depends_on:
      - auth-service
      - auction-service
    networks:
      - microservices-network

  zookeeper:
    image: bitnami/zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    networks:
      - microservices-network

  kafka:
    image: bitnami/kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ENABLE_KRAFT=no
      - ALLOW_ANONYMOUS_LOGIN=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - microservices-network
    depends_on:
      - zookeeper
  
  notification-service:
    build:
      context: ./services/NotificationService
      dockerfile: Dockerfile
    hostname: notification-service
    container_name: notification-service
    ports:
      - "8085:8085"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - PORT=8085
    depends_on:
      - kafka
    networks:
      - microservices-network

networks:
  microservices-network:
    name: microservices-network
    driver: bridge

volumes:
  auth-data:
  kafka-data:
  zookeeper-data:
  redis-data: 